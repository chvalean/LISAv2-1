# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.

param(
    [String] $TestParams, [Object] $AllVMData
)

function Install-Configure-HammerDB {
	$schemaBuildURL = "https://github.com/chvalean/LISAv2-1/raw/hammerdb-testcase/Tools/hammerdb_schemabuild.tcl"
	$schemaBuildName = "hammerdb_schemabuild.tcl"

	try {
		Write-LogInfo "Install libmysqlclient-dev on client VM"
		$cmd = ". utils.sh && update_repos && install_package libmysqlclient-dev"
		Run-LinuxCmd -ip $clientVMData.PublicIP -port $clientVMData.SSHPort -username $superUser `
			-password $password -command $cmd -runAsSudo

		# Download and install HammerDB
		Run-LinuxCmd -ip $clientVMData.PublicIP -port $clientVMData.SSHPort -username $superUser `
			-password $password -command "wget -q $($TestParams.hammerURL)/$($TestParams.hammerPKG)" -ignoreLinuxExitCode | Out-Null
		if (-not $?) {
			Write-LogErr "Unable to download HammerDB, please check the download URL!"
			$currentTestResult.TestResult = Get-FinalResultHeader -resultarr "ABORTED"
			return $currentTestResult
		}

		Run-LinuxCmd -ip $clientVMData.PublicIP -port $clientVMData.SSHPort -username $superUser `
			-password $password -command "chmod 755 ./$($TestParams.hammerPKG) && ./$($TestParams.hammerPKG) --mode silent" `
			-ignoreLinuxExitCode | Out-Null
		if (-not $?) {
			Write-LogErr "Unable to install HammerDB!"
			$currentTestResult.TestResult = Get-FinalResultHeader -resultarr "FAILED"
			return $currentTestResult
		}

		Run-LinuxCmd -ip $clientVMData.PublicIP -port $clientVMData.SSHPort -username $superUser `
			-password $password -command "wget -q $schemaBuildURL" -ignoreLinuxExitCode | Out-Null

		$cmd = "sed -i 's/127.0.0.1/$($serverVMData.InternalIP)/g' $schemaBuildName && sed -i 's/default_password/$($TestParams.sql_password)/g' $schemaBuildName"
		Run-LinuxCmd -ip $clientVMData.PublicIP -port $clientVMData.SSHPort -username $superUser `
			-password $password -command $cmd -ignoreLinuxExitCode | Out-Null

		#region CONFIGURE HAMMERDB DATABASE
		$configure_hammerdb = @"
cd /usr/local/HammerDB-3.1/
./hammerdbcli <<!
source /root/$schemaBuildName
!
"@
		Set-Content "$LogDir\setupDB.sh" $configure_hammerdb
		Copy-RemoteFiles -uploadTo $clientVMData.PublicIP -port $clientVMData.SSHPort `
			-files "$LogDir\setupDB.sh" -username $superUser -password $password -upload

		Run-LinuxCmd -ip $clientVMData.PublicIP -port $clientVMData.SSHPort `
			-username $superUser -password $password -command "chmod +x *.sh" | Out-Null
		$testJob = Run-LinuxCmd -ip $clientVMData.PublicIP -port $clientVMData.SSHPort `
			-username $superUser -password $password -command "./setupDB.sh" -runMaxAllowedTime 3600 `
			-ignoreLinuxExitCode | Out-Null
		#endregion
	#region MONITOR TEST
	while ((Get-Job -Id $testJob).State -eq "Running") {
		Wait-Time -seconds 20
	}
	} catch {
		Write-LogErr "Exception during HammerDB setup."
		return $false
	}
}

function Main {
    param (
        $TestParams, $AllVMData
    )
	$superUser = "root"
	# Create test result
	$resultArr = @()
	$currentTestResult = Create-TestResultObject

	try {
		$noClient = $true
		$noServer = $true
		foreach ($vmData in $allVMData) {
			if ($vmData.RoleName -imatch "client") {
				$clientVMData = $vmData
				$noClient = $false
			}
			elseif ($vmData.RoleName -imatch "server") {
				$noServer = $false
				$serverVMData = $vmData
			}
		}
		if ($noClient) {
			Throw "No master VM defined. Be sure that, Client VM role name matches with the pattern `"*master*`". Aborting Test."
		}
		if ($noServer) {
			Throw "No slave VM defined. Be sure that, Server machine role names matches with pattern `"*slave*`". Aborting Test."
		}

		Write-LogInfo "Client VM details :"
		Write-LogInfo "  RoleName : $($clientVMData.RoleName)"
		Write-LogInfo "  Public IP : $($clientVMData.PublicIP)"
		Write-LogInfo "  SSH Port : $($clientVMData.SSHPort)"
		Write-LogInfo "  Internal IP : $($clientVMData.InternalIP)"
		Write-LogInfo "Server VM details :"
		Write-LogInfo "  RoleName : $($serverVMData.RoleName)"
		Write-LogInfo "  Public IP : $($serverVMData.PublicIP)"
		Write-LogInfo "  SSH Port : $($serverVMData.SSHPort)"
		Write-LogInfo "  Internal IP : $($serverVMData.InternalIP)"

		# Checking automation compatibility
		if (! @("UBUNTU").contains($global:detectedDistro)) {
			Write-LogWarn "Unsupported distro in automation: ${global:detectedDistro}"
			return $global:ResultSkipped
		}

		# Enable passwordless authentication across all VMs
		Provision-VMsForLisa -allVMData $allVMData -installPackagesOnRoleNames "none"
		#endregion

		Write-LogInfo "Generating constants.sh..."
		$constantsFile = "$LogDir\constants.sh"
		Set-Content -Value "#Generated by Azure Automation." -Path $constantsFile
		Add-Content -Value "vms=$($serverVMData.RoleName),$($clientVMData.RoleName)" -Path $constantsFile
		Add-Content -Value "server=$($serverVMData.InternalIP)" -Path $constantsFile
		Add-Content -Value "client=$($clientVMData.InternalIP)" -Path $constantsFile

		foreach ($param in $currentTestData.TestParameters.param) {
			Add-Content -Value "$param" -Path $constantsFile
		}

		Write-LogInfo "constants.sh created successfully..."
		Write-LogInfo (Get-Content -Path $constantsFile)
		#endregion

		#region INSTALL CONFIGURE MySQL
		$install_configure_mysql = @"
cd /root/
./mysql_setup.sh > mysqlConsoleLogs.txt 2>&1
. utils.sh
collect_VM_properties
"@
		Set-Content "$LogDir\StartMySQLSetup.sh" $install_configure_mysql
		Copy-RemoteFiles -uploadTo $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-files "$constantsFile,$LogDir\StartMySQLSetup.sh" -username $superUser -password $password -upload

		Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-username $superUser -password $password -command "chmod +x *.sh" | Out-Null
		$testJob = Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-username $superUser -password $password -command "./StartMySQLSetup.sh" -RunInBackground
		#endregion

		#region MONITOR INSTALL CONFIGURE MySQL server
		while ((Get-Job -Id $testJob).State -eq "Running") {
			$currentStatus = Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
				-username $superUser -password $password -command "tail -2 mysqlConsoleLogs.txt | head -1"
			Write-LogInfo "Current Test Status : $currentStatus"
			Wait-Time -seconds 30
		}

		$mysqlStatus = Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-username $superUser -password $password -command "cat /root/state.txt"
		$testResult = Get-TestStatus $mysqlStatus
		if ($testResult -ne "PASS") {
			Copy-RemoteFiles -downloadFrom $serverVMData.PublicIP -port $serverVMData.SSHPort `
				-username $superUser -password $password -download -downloadTo $LogDir -files "*.txt, *.log"
			return $testResult
		}

		# Install-Configure-HammerDB
#region INSTALL CONFIGURE MySQL
$install_configure_hammerdb = @"
cd /root/
./hammerdb_setup.sh > hammerdbConsoleLogs.txt 2>&1
. utils.sh
collect_VM_properties
"@
		Set-Content "$LogDir\StarthammerdbSetup.sh" $install_configure_hammerdb
		Copy-RemoteFiles -uploadTo $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-files "$LogDir\StarthammerdbSetup.sh" -username $superUser -password $password -upload

		Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-username $superUser -password $password -command "chmod +x *.sh" | Out-Null
		$testJob = Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-username $superUser -password $password -command "./StarthammerdbSetup.sh" -RunInBackground
		#endregion

		#region MONITOR INSTALL CONFIGURE MySQL server
		while ((Get-Job -Id $testJob).State -eq "Running") {
			$currentStatus = Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
				-username $superUser -password $password -command "tail -2 hammerdbConsoleLogs.txt | head -1"
			Write-LogInfo "Current Test Status : $currentStatus"
			Wait-Time -seconds 30
		}

		$mysqlStatus = Run-LinuxCmd -ip $serverVMData.PublicIP -port $serverVMData.SSHPort `
			-username $superUser -password $password -command "cat /root/state.txt"
		$testResult = Get-TestStatus $mysqlStatus
		if ($testResult -ne "PASS") {
			Copy-RemoteFiles -downloadFrom $serverVMData.PublicIP -port $serverVMData.SSHPort `
				-username $superUser -password $password -download -downloadTo $LogDir -files "*.txt, *.log"
			return $testResult
		}
	} catch {
		$ErrorMessage =  $_.Exception.Message
		$ErrorLine = $_.InvocationInfo.ScriptLineNumber
		Write-LogErr "EXCEPTION : $ErrorMessage at line: $ErrorLine"
		$testResult = "FAIL"
	} finally {
		if (!$testResult) {
			$testResult = "Aborted"
		}
		$resultArr += $testResult
	}
	$currentTestResult.TestResult = Get-FinalResultHeader -resultarr $resultArr
	return $currentTestResult
}

Main -TestParams (ConvertFrom-StringData $TestParams.Replace(";","`n")) -AllVMData $AllVMData